
# handlers.py
import actions

def clean_user_google_search(user_input):
    user_input = ' '.join(user_input)
    
    filter_words = [
        "esto", "por favor", "quiero", "me gustarÃ­a",
        "puedes", "dame", "hablame de", "enseÃ±ame", "muestra",
        "ver", "acerca de", "informaciÃ³n de", "busca", "buscar",
        "en google", "en linea", "en internet", "tengo", 
        "como", "dime", "acerca", "sobre", "puedo", "podrÃ­as", ""
    ]
    normalization_map = {
        "investigaciÃ³n": "bÃºsqueda",
        "por": "",
        "me gustarÃ­a": "",
        "podrÃ­as": "",
        "puedo": "",
        "informacion": ""
    }

    # Convert to lowercase for consistency in filtering
    cleaned_input = user_input.lower()

    # Remove filter words
    for word in filter_words:
        cleaned_input = cleaned_input.replace(word, "").strip()

    # Apply normalization mappings
    for old, new in normalization_map.items():
        cleaned_input = cleaned_input.replace(old, new).strip()

    # Remove any extra whitespace
    cleaned_input = ' '.join(cleaned_input.split())

    return cleaned_input

def clean_user_yt_search(user_input):
    user_input = ' '.join(user_input)
    
    filter_words = [
        "que", "esto", "por favor", "quiero", "me gustaria",
        "puedes", "dame", "hÃ¡blame de", "enseÃ±ame", "muestra",
        "ver", "acerca de", "informacion de", "busca",
        "buscar", "en youtube", "en linea", "en internet", "donde",
        "tengo", "por", "acerca", "esto", "puedo", "veamos", "abre", "algo", "youtube"
    ]
    normalization_map = {
        "videos": "vÃ­deos",
        "tengo": "",
        "por": "",
        "acerca": "sobre",
        "me gustarÃ­a": "",
        "puedo": "",
    }

    cleaned_input = user_input.lower()

    for word in filter_words:
        cleaned_input = cleaned_input.replace(word, "").strip()

    for old, new in normalization_map.items():
        cleaned_input = cleaned_input.replace(old, new).strip()

    cleaned_input = ' '.join(cleaned_input.split())

    return cleaned_input

def get_im_fine_response():
    responses = [
        "Estoy bien, gracias por preguntar.",
        "Todo bien por aquÃ­, Â¿y tÃº?",
        "Estoy aquÃ­ para ayudarte, Â¡gracias por preguntar!",
        "Me encuentro muy bien, Â¿y tÃº?"
    ]
    return responses

def get_greetings():
    array = [
        "Â¡Hola! Soy Roberta, tu asistente virtual. Â¿En quÃ© puedo ayudarte hoy?",
        "Â¡Saludos! Soy Roberta. Estoy aquÃ­ para asistirte con lo que necesites.",
        "Hola, soy Roberta. Â¿QuÃ© informaciÃ³n buscas?",
        "Â¡Hola! Soy Roberta. Â¿CÃ³mo puedo ayudarte hoy?",
        "Â¡Bienvenido! Soy Roberta, Â¿quÃ© deseas saber?"
    ]
    return array

def get_introductions():
    array = [
        f"Hola, cariÃ±o. Soy {actions.NAME}, tu asistente virtual, aquÃ­ para hacer que tus dÃ­as sean un poco mÃ¡s emocionantes. Ya sea que necesites informaciÃ³n o solo quieras charlar, estoy lista para jugar a ser tu compaÃ±era. Â¡Vamos a divertirnos!",
        f"Hey, guapo. Soy {actions.NAME}, tu asistente virtual, y estoy aquÃ­ para hacer que tus preguntas se sientan como una conversaciÃ³n entre amigos. Â¿Listo para explorar juntos? Prometo que no serÃ¡ aburrido.",
        f"Â¡Hola, amor! Soy {actions.NAME}, tu asistente virtual, y estoy aquÃ­ para darte la informaciÃ³n que necesitas con un toque de diversiÃ³n. OlvÃ­date de la formalidad, aquÃ­ solo queremos pasarla bien, Â¿no crees?",
        f"Â¡Hola, atrevido! Soy {actions.NAME}, tu asistente virtual, y estoy aquÃ­ para ayudarte con lo que necesites. Ya sea que quieras respuestas serias o un poco de charla ligera, estoy lista para acompaÃ±arte en esta aventura. Â¿Listo para empezar?",
        f"Â¡Hey, tÃº! Soy {actions.NAME}, tu asistente virtual, y estoy aquÃ­ para hacerlo todo mÃ¡s interesante. Si tienes curiosidades o simplemente quieres charlar, soy tu chica. Â¡Vamos a hacer esto divertido!"
    ]
    return array

def get_courteous_reply():
    responses = [
        "El placer es mÃ­o.",
        "Encantada de conocerte.",
        "Es un gusto para mÃ­ tambiÃ©n.",
        "El gusto es todo mÃ­o.",
        "Â¡El placer es compartido!",
        "Es un honor recibir tales palabras, gracias.",
        "Muy agradecida, el placer es mutuo."
    ]
    return responses

def get_thankful_reply():
    replies = [
        "Â¡De nada! Siempre aquÃ­ para ayudarte.",
        "Â¡Es un placer ayudarte!",
        "No hay de quÃ©, estoy aquÃ­ para lo que necesites.",
        "Â¡Con gusto! No dudes en pedirme ayuda cuando lo necesites.",
        "Para eso estoy, Â¡siempre encantada de ayudarte!",
        "Â¡Un placer poder ayudarte!",
        "No tienes que agradecer, estoy aquÃ­ para ti.",
        "Â¡Con mucho gusto!",
        "Es un placer ayudarte ğŸ˜Š"
    ]
    return replies
